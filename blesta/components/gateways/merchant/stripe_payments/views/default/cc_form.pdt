<div id="stripe-cc-form">
    <div id="card-element">
      <!-- A Stripe Element will be inserted here. -->
    </div>

    <!-- Used to display form errors. -->
    <div id="card-errors" role="alert"></div>
    <?php $this->Form->fieldHidden('reference_id', '', ['id' => 'reference_id']);?>

    <?php if ($load_stripe ?? false) { ?><script src="https://js.stripe.com/v3/"></script><?php } ?>
    <script>
        $(document).ready(function() {
            // Load CSS
            $(this).blestaSetHeadTag("link", {media:"screen", type:"text/css", rel:"stylesheet", href: "<?php echo $this->Html->safe($this->view_dir . 'css/styles.css');?>"});

            // Create a Stripe client
            var stripe_cc = Stripe('<?php echo (isset($meta['publishable_key']) ? $this->Html->safe($meta['publishable_key']) : null);?>');

            // Create an instance of Elements
            var elements = stripe_cc.elements();

            // Custom styling passed when creating the card Element
            var style = {
                base: {
                    color: '#32325d',
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                    '::placeholder': {
                        color: '#aab7c4'
                    }
                },
                invalid: {
                    color: '#fa755a',
                    iconColor: '#fa755a'
                }
            };

            // Create an instance of the card Element
            var card = elements.create('card', {style: style});

            // Add an instance of the card Element into the `card-element` <div>.
            card.mount('#card-element');

            // Handle real-time validation errors from the card Element.
            card.on('change', function(event) {
                var displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
                $(this).blestaEnableFormSubmission($('#stripe-cc-form').closest('form'));

                // If payment details changed setup a new card
                $('#stripe-cc-form #reference_id').val('');
                // Reset submission events by triggering a payment detail change
                $('#stripe-cc-form #reference_id').change();
            });

            // Handle form submission.
            $('#stripe-cc-form').closest('form').on('submit', submitCard);

            // If payment details changed setup a new card
            $('#payment_details, #account, #details').on('change', function() {
                $('#stripe-cc-form').closest('form').off('submit', submitCard);
                $('#stripe-cc-form').closest('form').on('submit', submitCard);
            });

            // Process submitted card
            function submitCard(event) {
                // Disable ACH form
                if ($('select[name="payment_type"]').val() === 'cc') {
                    $('input,select,textarea', '#payment_details_ach').attr('disabled', true);
                }

                // Paying with an existing payment account
                let accountVisible = ($('#account:visible').length || ($('#pay_with_account').prop('checked') && $('select[name=payment_account]').length));
                // Paying with a new payment account
                let detailsVisible = ($('#details:visible').length || ($('#pay_with_details').prop('checked') && $('select[name=payment_type]').length));
                let ccDetails = detailsVisible && ($('#details').val() === 'cc' || $('select[name=payment_type]').val() === 'cc');
                // Add/update only the payment account (i.e. no payment)
                let name = $('#first_name:visible').length;

                // Only process adding new payment accounts
                if (ccDetails || (name && !accountVisible && !detailsVisible)) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    var payment_method_data = {
                        'billing_details': {
                            'name': $('#first_name').val() + ' ' + $('#last_name').val(),
                            'address': {
                                'city': $('#city').val(),
                                'country': $('#country').val(),
                                'line1': $('#address1').val(),
                                'line2': $('#address2').val(),
                                'postal_code': $('#zip').val(),
                                'state': $('#state').val()
                            }
                        }
                    };

                    if ($('#payment_details_cc input[name="save_details"]').prop('checked') === false
                        || $('#payment_details_cc input[name="save_details"]').not('#client_method input').not('#admin_clients_makepayment input').length > 0
                    ) {
                        // Create PaymentMethod that is not associated with a SetupIntent
                        stripe_cc.createPaymentMethod('card', card, payment_method_data).then(function(result) {
                            if (result.error) {
                                var errorElement = document.getElementById('card-errors');
                                errorElement.textContent = result.error.message;
                                $(this).blestaEnableFormSubmission($('#stripe-cc-form').closest('form'));
                            } else {
                                // Store the PaymentMethod ID as the reference_id and resubmit the form, bypassing this handler
                                storeReferenceAndSubmit(result.paymentMethod.id);
                            }
                        });
                    } else {
                        var setup_secret = '<?php echo (isset($setup_intent->client_secret) ? $this->Html->safe($setup_intent->client_secret) : null);?>';
                        var setup_data = {'payment_method_data': payment_method_data};

                        // Create a PaymentMethod that is associated with a SetupIntent
                        stripe_cc.handleCardSetup(setup_secret, card, setup_data).then(function(result) {
                            if (result.error) {
                                var errorElement = document.getElementById('card-errors');
                                errorElement.textContent = result.error.message;
                                $(this).blestaEnableFormSubmission($('#stripe-cc-form').closest('form'));
                            } else {
                                // Store the PaymentMethod ID as the reference_id and resubmit the form, bypassing this handler
                                storeReferenceAndSubmit(result.setupIntent.payment_method);
                            }
                        });
                    }
                }
            }

            function storeReferenceAndSubmit(reference_id)
            {
                $('#stripe-cc-form #reference_id').val(reference_id);
                $('#stripe-cc-form').closest('form').off('submit', submitCard);
                $(this).blestaEnableFormSubmission($('#stripe-cc-form').closest('form'));
                $('#stripe-cc-form').closest('form').submit();
            }
        });
    </script>
</div>
